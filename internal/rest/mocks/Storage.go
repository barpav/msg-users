// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/barpav/msg-users/internal/rest/models"
	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// ChangePassword provides a mock function with given fields: ctx, userId, newPassword
func (_m *Storage) ChangePassword(ctx context.Context, userId string, newPassword string) error {
	ret := _m.Called(ctx, userId, newPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userId, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: ctx, id, name, password
func (_m *Storage) CreateUser(ctx context.Context, id string, name string, password string) error {
	ret := _m.Called(ctx, id, name, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, id, name, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: ctx, userId
func (_m *Storage) DeleteUser(ctx context.Context, userId string) error {
	ret := _m.Called(ctx, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenerateUserDeletionCode provides a mock function with given fields: ctx, userId
func (_m *Storage) GenerateUserDeletionCode(ctx context.Context, userId string) (string, error) {
	ret := _m.Called(ctx, userId)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCommonProfileInfoV1 provides a mock function with given fields: ctx, userId, info
func (_m *Storage) UpdateCommonProfileInfoV1(ctx context.Context, userId string, info *models.UserProfileCommonV1) (string, error) {
	ret := _m.Called(ctx, userId, info)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.UserProfileCommonV1) (string, error)); ok {
		return rf(ctx, userId, info)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.UserProfileCommonV1) string); ok {
		r0 = rf(ctx, userId, info)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.UserProfileCommonV1) error); ok {
		r1 = rf(ctx, userId, info)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserInfoV1 provides a mock function with given fields: ctx, id
func (_m *Storage) UserInfoV1(ctx context.Context, id string) (*models.UserInfoV1, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.UserInfoV1
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.UserInfoV1, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.UserInfoV1); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserInfoV1)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateCredentials provides a mock function with given fields: ctx, userId, password
func (_m *Storage) ValidateCredentials(ctx context.Context, userId string, password string) (bool, error) {
	ret := _m.Called(ctx, userId, password)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, userId, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, userId, password)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userId, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateUserDeletionCode provides a mock function with given fields: ctx, userId, code
func (_m *Storage) ValidateUserDeletionCode(ctx context.Context, userId string, code string) (bool, error) {
	ret := _m.Called(ctx, userId, code)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, userId, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, userId, code)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userId, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
